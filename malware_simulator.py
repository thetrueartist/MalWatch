#!/usr/bin/env python3
"""
Malware Behavior Simulator - Creates test files to simulate malware dropping behavior
For testing the malware file monitor
"""

import os
import sys
import time
import random
import tempfile
import platform
from pathlib import Path
from datetime import datetime

class MalwareSimulator:
    """Simulates various malware file-dropping behaviors"""
    
    def __init__(self, base_dir=None):
        if base_dir is None:
            self.base_dir = Path(tempfile.gettempdir()) / "malware_sim_test"
        else:
            self.base_dir = Path(base_dir)
        
        self.base_dir.mkdir(exist_ok=True)
        print(f"Simulation directory: {self.base_dir}")
        
        # Platform-specific suspicious paths
        system = platform.system().lower()
        if system == 'windows':
            self.suspicious_paths = [
                Path(tempfile.gettempdir()),
                Path(os.path.expandvars(r'%APPDATA%')) / "test_malware",
                Path(os.path.expandvars(r'%USERPROFILE%')) / "Desktop" / "test_malware"
            ]
        else:
            self.suspicious_paths = [
                Path('/tmp') / "malware_test",
                Path.home() / "Desktop" / "malware_test",
                Path('/var/tmp') / "malware_test"
            ]
        
        # Ensure test directories exist
        for path in self.suspicious_paths:
            try:
                path.mkdir(parents=True, exist_ok=True)
            except:
                pass
    
    def create_high_entropy_file(self, filepath, size=1024):
        """Create a file with high entropy (simulates packed/encrypted malware)"""
        try:
            with open(filepath, 'wb') as f:
                # Generate random bytes to simulate packed executable
                random_data = bytes([random.randint(0, 255) for _ in range(size)])
                f.write(random_data)
            print(f"Created high-entropy file: {filepath}")
            return True
        except Exception as e:
            print(f"Error creating high-entropy file: {e}")
            return False
    
    def create_fake_executable(self, filepath, size=30000):
        """Create a small fake executable file"""
        try:
            with open(filepath, 'wb') as f:
                # Write PE header magic bytes
                f.write(b'MZ')  # DOS header
                f.write(b'\x00' * 58)  # DOS stub
                f.write(b'PE\x00\x00')  # PE signature
                
                # Fill rest with random data
                remaining = size - 64
                if remaining > 0:
                    random_data = bytes([random.randint(0, 255) for _ in range(remaining)])
                    f.write(random_data)
            
            print(f"Created fake executable: {filepath}")
            return True
        except Exception as e:
            print(f"Error creating fake executable: {e}")
            return False
    
    def create_script_file(self, filepath, script_type='batch'):
        """Create a suspicious script file"""
        try:
            if script_type == 'batch':
                content = """@echo off
echo This is a test malware script
mkdir C:\\temp\\malware_test
copy "%0" "C:\\temp\\malware_test\\backup.bat"
echo Malware simulation complete
"""
                filepath = filepath.with_suffix('.bat')
            
            elif script_type == 'powershell':
                content = """# Test PowerShell malware simulation
Write-Host "Malware simulation running..."
New-Item -ItemType Directory -Path "$env:TEMP\\malware_test" -Force
Copy-Item $MyInvocation.MyCommand.Path "$env:TEMP\\malware_test\\backup.ps1"
Write-Host "Simulation complete"
"""
                filepath = filepath.with_suffix('.ps1')
            
            elif script_type == 'vbscript':
                content = """' Test VBScript malware simulation
WScript.Echo "Malware simulation running..."
Set fso = CreateObject("Scripting.FileSystemObject")
fso.CreateFolder("C:\\temp\\malware_test")
WScript.Echo "Simulation complete"
"""
                filepath = filepath.with_suffix('.vbs')
            
            else:  # shell script
                content = """#!/bin/bash
echo "Malware simulation running..."
mkdir -p /tmp/malware_test
cp "$0" /tmp/malware_test/backup.sh
echo "Simulation complete"
"""
                filepath = filepath.with_suffix('.sh')
            
            with open(filepath, 'w') as f:
                f.write(content)
            
            print(f"Created script file: {filepath}")
            return True
        except Exception as e:
            print(f"Error creating script file: {e}")
            return False
    
    def create_registry_file(self, filepath):
        """Create a suspicious registry file"""
        try:
            content = """Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run]
"MalwareTest"="C:\\\\temp\\\\malware_test\\\\fake_malware.exe"

[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run]
"SystemTest"="C:\\\\temp\\\\malware_test\\\\system_service.exe"
"""
            filepath = filepath.with_suffix('.reg')
            
            with open(filepath, 'w') as f:
                f.write(content)
            
            print(f"Created registry file: {filepath}")
            return True
        except Exception as e:
            print(f"Error creating registry file: {e}")
            return False
    
    def create_large_file(self, filepath, size_mb=60):
        """Create a large suspicious file"""
        try:
            with open(filepath, 'wb') as f:
                # Write in chunks to avoid memory issues
                chunk_size = 1024 * 1024  # 1MB chunks
                for _ in range(size_mb):
                    chunk = bytes([random.randint(0, 255) for _ in range(chunk_size)])
                    f.write(chunk)
            
            print(f"Created large file ({size_mb}MB): {filepath}")
            return True
        except Exception as e:
            print(f"Error creating large file: {e}")
            return False
    
    def simulate_dropper_behavior(self, num_files=5, delay=2):
        """Simulate a dropper creating multiple files"""
        print(f"\\nSimulating dropper behavior ({num_files} files, {delay}s delay)")
        
        base_names = [
            'svchost', 'explorer', 'winlogon', 'system32',
            'update', 'install', 'setup', 'temp', 'cache'
        ]
        
        extensions = ['.exe', '.dll', '.tmp', '.dat', '.bin']
        
        for i in range(num_files):
            # Choose random path and filename
            path = random.choice(self.suspicious_paths)
            base_name = random.choice(base_names)
            ext = random.choice(extensions)
            
            filepath = path / f"{base_name}_{i}{ext}"
            
            # Create different types of files
            if ext == '.exe':
                self.create_fake_executable(filepath)
            elif ext == '.dll':
                self.create_high_entropy_file(filepath, size=random.randint(5000, 50000))
            else:
                self.create_high_entropy_file(filepath, size=random.randint(1000, 10000))
            
            time.sleep(delay)
    
    def simulate_rapid_file_creation(self, num_files=20, delay=0.1):
        """Simulate rapid file creation (like ransomware)"""
        print(f"\\nSimulating rapid file creation ({num_files} files, {delay}s delay)")
        
        test_dir = self.suspicious_paths[0] / "rapid_test"
        test_dir.mkdir(exist_ok=True)
        
        for i in range(num_files):
            filepath = test_dir / f"file_{i:03d}.tmp"
            
            # Create small files rapidly
            with open(filepath, 'wb') as f:
                f.write(b'A' * random.randint(100, 1000))
            
            print(f"Created: {filepath}")
            time.sleep(delay)
    
    def simulate_file_modifications(self, num_iterations=10, delay=1):
        """Simulate file modifications"""
        print(f"\\nSimulating file modifications ({num_iterations} iterations, {delay}s delay)")
        
        test_file = self.suspicious_paths[0] / "modified_file.txt"
        
        for i in range(num_iterations):
            with open(test_file, 'w') as f:
                f.write(f"Modification {i} at {datetime.now()}\\n")
                f.write("Some suspicious content\\n" * random.randint(10, 100))
            
            print(f"Modified: {test_file} (iteration {i+1})")
            time.sleep(delay)
    
    def simulate_persistence_mechanisms(self):
        """Simulate common persistence mechanisms"""
        print("\\nSimulating persistence mechanisms")
        
        # Startup folder simulation
        startup_dir = self.suspicious_paths[0] / "startup_sim"
        startup_dir.mkdir(exist_ok=True)
        
        # Create startup script
        startup_script = startup_dir / "startup_malware.bat"
        self.create_script_file(startup_script, 'batch')
        
        # Create registry file
        reg_file = startup_dir / "persistence.reg"
        self.create_registry_file(reg_file)
        
        # Create scheduled task simulation
        task_file = startup_dir / "malware_task.xml"
        with open(task_file, 'w') as f:
            f.write("""<?xml version="1.0" encoding="UTF-16"?>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
  <Triggers>
    <LogonTrigger>
      <Enabled>true</Enabled>
    </LogonTrigger>
  </Triggers>
  <Actions>
    <Exec>
      <Command>C:\\temp\\malware_test\\fake_malware.exe</Command>
    </Exec>
  </Actions>
</Task>""")
        
        print(f"Created persistence files in: {startup_dir}")
    
    def run_full_simulation(self):
        """Run a comprehensive malware simulation"""
        print("="*60)
        print("MALWARE BEHAVIOR SIMULATION STARTING")
        print("="*60)
        
        # Wait for user to start monitoring
        input("Start your malware monitor, then press Enter to begin simulation...")
        
        # Simulate different malware behaviors
        self.simulate_dropper_behavior(num_files=7, delay=1)
        time.sleep(3)
        
        self.simulate_rapid_file_creation(num_files=15, delay=0.5)
        time.sleep(3)
        
        self.simulate_file_modifications(num_iterations=5, delay=2)
        time.sleep(3)
        
        self.simulate_persistence_mechanisms()
        time.sleep(3)
        
        # Create some large files
        print("\\nCreating large suspicious files...")
        large_file = self.suspicious_paths[0] / "large_payload.bin"
        self.create_large_file(large_file, size_mb=70)
        
        # Create various script types
        print("\\nCreating different script types...")
        script_dir = self.suspicious_paths[0] / "scripts"
        script_dir.mkdir(exist_ok=True)
        
        self.create_script_file(script_dir / "malware", 'batch')
        self.create_script_file(script_dir / "payload", 'powershell')
        self.create_script_file(script_dir / "dropper", 'vbscript')
        
        if platform.system().lower() != 'windows':
            self.create_script_file(script_dir / "linux_payload", 'shell')
        
        # Create files with suspicious names
        print("\\nCreating files with suspicious names...")
        suspicious_names = [
            'svchost.exe', 'winlogon.exe', 'explorer.exe',
            'system.dll', 'kernel32.dll', 'ntdll.dll',
            'update.exe', 'install.msi', 'setup.exe'
        ]
        
        for name in suspicious_names:
            filepath = self.suspicious_paths[0] / name
            if name.endswith('.exe'):
                self.create_fake_executable(filepath)
            elif name.endswith('.dll'):
                self.create_high_entropy_file(filepath, size=random.randint(20000, 80000))
            else:
                self.create_high_entropy_file(filepath, size=random.randint(10000, 50000))
            time.sleep(0.5)
        
        print("\\n" + "="*60)
        print("SIMULATION COMPLETE")
        print("="*60)
        print(f"Check your monitor output and the directory: {self.base_dir}")
        print("Files created in the following locations:")
        for path in self.suspicious_paths:
            if path.exists():
                print(f"  - {path}")
    
    def cleanup(self):
        """Clean up created test files"""
        print("\\nCleaning up test files...")
        
        for path in self.suspicious_paths:
            if path.exists():
                try:
                    import shutil
                    shutil.rmtree(path)
                    print(f"Removed: {path}")
                except Exception as e:
                    print(f"Error removing {path}: {e}")
        
        print("Cleanup complete.")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description="Malware Behavior Simulator")
    parser.add_argument('--base-dir', help='Base directory for test files')
    parser.add_argument('--quick', action='store_true', 
                        help='Run quick simulation (fewer files, shorter delays)')
    parser.add_argument('--cleanup', action='store_true',
                        help='Clean up previous test files')
    parser.add_argument('--dropper-only', action='store_true',
                        help='Only simulate dropper behavior')
    parser.add_argument('--rapid-only', action='store_true',
                        help='Only simulate rapid file creation')
    parser.add_argument('--persistence-only', action='store_true',
                        help='Only simulate persistence mechanisms')
    
    args = parser.parse_args()
    
    simulator = MalwareSimulator(args.base_dir)
    
    if args.cleanup:
        simulator.cleanup()
        return
    
    print("Malware Behavior Simulator")
    print("This tool creates test files to simulate malware behavior")
    print("for testing your malware monitoring system.\\n")
    
    if args.quick:
        print("Quick simulation mode enabled")
    
    try:
        if args.dropper_only:
            simulator.simulate_dropper_behavior(
                num_files=3 if args.quick else 7,
                delay=0.5 if args.quick else 1
            )
        elif args.rapid_only:
            simulator.simulate_rapid_file_creation(
                num_files=10 if args.quick else 20,
                delay=0.1 if args.quick else 0.5
            )
        elif args.persistence_only:
            simulator.simulate_persistence_mechanisms()
        else:
            # Run full simulation
            if args.quick:
                print("Running quick simulation...")
                simulator.simulate_dropper_behavior(num_files=3, delay=0.5)
                time.sleep(1)
                simulator.simulate_rapid_file_creation(num_files=10, delay=0.2)
                time.sleep(1)
                simulator.simulate_persistence_mechanisms()
            else:
                simulator.run_full_simulation()
    
    except KeyboardInterrupt:
        print("\\nSimulation interrupted by user.")
    
    except Exception as e:
        print(f"Error during simulation: {e}")
    
    finally:
        cleanup_choice = input("\\nDo you want to clean up test files? (y/n): ")
        if cleanup_choice.lower() in ['y', 'yes']:
            simulator.cleanup()

if __name__ == "__main__":
    main()
